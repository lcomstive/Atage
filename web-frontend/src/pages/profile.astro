---
import { Icon } from "astro-icon/components";
import Layout from "../layouts/Layout.astro";
import Input from "../components/Input.astro";
import Vertical from "../components/Vertical.astro";
import { getSession } from "../scripts/Authenticate";
import Horizontal from "../components/Horizontal.astro";

const title = 'Profile';

const session = await getSession(Astro.request);
if(session == null)
	return Astro.redirect('/login');
---

<Layout title={title}>
	<h1>{title}</h1>

	<Vertical>
		<Horizontal style="justify-content: space-between">
			<h2 style="margin: auto 0"><span style="opacity: 0.6">Hey,</span> <span style="font-weight: 600">{session.username}</span></h2>
			<button class="primary light" id="btnLogout">Logout</button>
		</Horizontal>
		<Vertical style="margin-top: 30px">
			<h4>Account Settings</h4>
			<div class="secondary lightest card">
				<Horizontal style="justify-content: space-between;">
					<Vertical style="width: 45%; gap: 15px">
						<span class="columnTitle">Details</span>
						<div id="usernameInput">
							<Input disabled={true} label="Username" value={session.username} />
							<Icon name="mingcute:edit-2-fill" class="icon" />
						</div>
					</Vertical>
					<Vertical style="width: 45%; gap: 15px" id="changePassword">
						<span class="columnTitle">Change Password</span>
						<Input label="Existing" 	type="password" autocomplete="current-password" />
						<Input label="New" 			type="password" autocomplete="new-password"/>
						<Input label="Confirm" 		type="password" autocomplete="new-password"/>
						<button id="btnUpdatePassword" class="secondary light">Update Password</button>
						<span class="error light" style="text-align: center; padding: 5px; display: none">Error text</span>
					</Vertical>
				</Horizontal>
			</div>
		</Vertical>
	</Vertical>
</Layout>

<script>
	import { navigate } from "astro:transitions/client";

	function logout() {
		fetch(`/api/logout`)
			.then(() => {
				document.body.dataset.username = undefined;
				navigate('/?refreshSession');
			})
			.catch(err => console.error(err));
	}

	function updatePassword() {
		let container = document.getElementById('changePassword');
		let inputs = container.getElementsByTagName('input');
		let error = container.getElementsByClassName('error')[0];
		let btn = container.getElementsByTagName('button')[0];
		setError('', error);
		if(inputs[1].value != inputs[2].value) { // Check new and Confirm
			setError('Confirm and new passwords do not match', error);
			return;
		}

		if(inputs[0].value == inputs[1].value) {
			setError('New password hasn\'t changed', error);
			return;
		}

		fetch('/api/user/updatePassword', {
			method: 'POST',
			credentials: 'include',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({
				currentPassword: inputs[0].value,
				newPassword: inputs[1].value
			})
		})
		.then(response => response.json())
		.then(json => {
			setError(json.error ?? '', error);
			if(!json.success)
				return;
			for(let i = 0; i < inputs.length; i++)
				inputs[i].value = '';

			let bgColor = btn.style.backgroundColor;
			btn.style.backgroundColor = 'rgb(var(--success))';
			setTimeout(() => btn.style.backgroundColor = bgColor, 1000);
		})
		.catch(err => {
			console.error(err);
			setError(err.message, error);
		});
	}

	function setError(msg, el) {
		el.innerHTML = msg;
		el.style.display = msg == '' ? 'none' : 'block';
	}

	function setup() {
		document.getElementById('changePassword')?.getElementsByTagName('button')[0]
										.addEventListener('click', updatePassword);
		document.getElementById('btnLogout')?.addEventListener('click', logout);
	}

	setup();
	document.addEventListener('astro:after-swap', setup);
</script>

<style>
	:global(.layoutContent) > .vertical {
		max-width: 750px;
		margin: 0 auto;
	}

	.card {
		padding: 1rem;
	}

	.columnTitle {
		padding-bottom: 5px;
		border-bottom: 1px solid rgba(var(--text), 0.1);
		margin-bottom: 5px;
	}

	#usernameInput {
		display: flex;
		flex-direction: row;
		align-items: center;
		gap: 10px;
	}

	#usernameInput :global(.customInput) {
		flex-grow: 1;
	}

	#usernameInput .icon {
		cursor: pointer;
		opacity: 0.7;
	}

	#usernameInput .icon:hover {
		opacity: 1;
	}

	@media screen and (max-width: 768px) {
		:global(.layoutContent) {
			max-width: unset;
			margin: 0;
		}

		:global(.layoutContent .horizontal) {
			flex-direction: column !important;
		}

		:global(.layoutContent .horizontal .vertical) {
			width: 100% !important;
			margin-bottom: 25px;
		}
	}
</style>