---
import { Icon } from 'astro-icon/components';
import Layout from '../../layouts/Layout.astro';
import { fetchAuth, getSession } from '../../scripts/Authenticate'
import Vertical from '../../components/Vertical.astro';
import TagsInput from '../../components/TagsInput.astro';
import Horizontal from '../../components/Horizontal.astro';
import Post from '../../components/Post.astro';

let apiURL = '/posts';
let apiParams = new URLSearchParams()
if(Astro.url.searchParams.has('tags'))
	apiParams.set('tags', Astro.url.searchParams.get('tags'));

const sorting = Astro.url.searchParams.get('sort') ?? 'asc';
apiParams.set('sort', `date:${sorting}`);

const response = await fetchAuth(`${apiURL}?${apiParams.toString()}`, Astro.request);
const posts = await response.json();
const title = 'Posts';

const session = await getSession();
---

<Layout title={title}>
	<Vertical>
		<Horizontal id="topBar">
			<h1>{title}</h1>

			{session &&
				<a href="/posts/new" id="btnNewPost" class="primary light">
					<Icon name="mingcute:plus-fill" />
					<span>New</span>
				</a>
			}
		</Horizontal>
		<Horizontal>
			<TagsInput style="flex-grow: 1" transition:persist />
			<button id="btnSort">
				<Icon name="mingcute:sort-descending-line" class={sorting != 'desc' ? 'hidden' : ''} />
				<Icon name="mingcute:sort-ascending-line" class={sorting == 'desc' ? 'hidden' : ''} />
			</button>
		</Horizontal>

		<div class="allPostsContainer">
			{posts.map(post => <a href={`/posts/${post._id}`}><Post post={post} useThumbnail={true} data-postid={post._id} /></a> )}
			{posts.length > 0 && <div />} <!-- Additional div to reduce stretching on last row -->
		</div>
	</Vertical>
</Layout>

<script src="../../components/TagsInput.js"></script>
<script>
	import { TagInput } from "../../components/TagsInput";
	import { navigate } from "astro:transitions/client";
		
	function onTagsChanged(ev) {
		// Navigate to new URL with tags
		const url = new URL(window.location.href);
		if(ev.detail?.length > 0)
			url.searchParams.set('tags', ev.detail);
		else
			url.searchParams.delete('tags');

		navigate(url.toString());
	}

	function swapSortOrder() {
		const url = new URL(window.location.href);
		let currentSort = url.searchParams.get('sort') ?? 'asc';
		url.searchParams.set('sort', currentSort == 'asc' ? 'desc' : 'asc');
		navigate(url.toString());
	}

	function setup() {
		let allPostsContainer = document.getElementsByClassName('allPostsContainer')[0];
		if(!allPostsContainer)
			return;
		
		let tagInputEl = document.getElementsByClassName('tagsInput')[0]
		if(!tagInputEl)
			return;

		document.getElementById('btnSort')?.addEventListener('click', swapSortOrder);

		// Get search tags from URL
		let tags = new URLSearchParams(window.location.search).get('tags')?.split(',') ?? [];
		let tagInput = new TagInput(tagInputEl);
		tagInput.addTags(tags);

		// Response to tag change events
		tagInputEl?.addEventListener('tagsChanged', onTagsChanged);
	}

	function removeListeners() {
		document.getElementById('btnSort')?.removeEventListener('click', swapSortOrder);
		document.getElementsByClassName('tagsInput')[0]?.removeEventListener('tagsChanged', onTagsChanged);
	}

	setup();
	document.addEventListener('astro:after-swap', setup);
	document.addEventListener('astro:before-swap', removeListeners)
</script>

<style is:inline>
	.allPostsContainer {
		width: 100%;
		display: flex;
		flex-wrap: wrap;
		gap: 10px;
		padding-bottom: 20px;
		justify-content: center;
	}

	.allPostsContainer .post {
		position: relative;
		height: 350px;
		width: 350px;
		transition: opacity 0.1s ease-in-out;
	}

	#topBar {
		position: relative;
		display: flex;
		width: 100%;
	}

	#topBar h1 {
		width: 100%;
		text-align: center;
	}

	#btnNewPost {
		width: fit-content;
		color: #fff;
		text-decoration: none;
		padding: 5px 15px;
		height: fit-content;

		gap: 7.5px;
		display: flex;
		align-items: center;
		
		position: absolute;
		right: 10px;
		top: 25px;
	}

	#btnSort {
		width: 35px;
		height: 35px;
		padding: 0;
		padding-top: 5px;
		font-size: 1.2em;
		border: none;
	}

	@media screen and (max-aspect-ratio: 1/1) {
		.allPostsContainer > .post {
			height: 200px;
		}
	}

	/* Mobile */
	@media screen and (max-width: 450px) {
		.allPostsContainer .post {
			width: 150px;
			height: 150px;
		}
	}

	@media screen and (min-width: 451px) and (max-width: 1200px) {
		.allPostsContainer .post {
			height: 200px !important;
			width: 200px !important;
		}
	}

	@media screen and (max-width: 550px) {
		#topBar { flex-direction: column; }

		#btnNewPost {
			margin-left: auto;
			position: relative;
			top: unset; right: unset;
		}
	}
</style>
