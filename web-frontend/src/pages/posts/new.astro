---
import Layout from "../../layouts/Layout.astro";
import Vertical from "../../components/Vertical.astro";
import { Icon } from "astro-icon/components";
import TagsInput from "../../components/TagsInput.astro";
import Horizontal from "../../components/Horizontal.astro";
import Space from "../../components/Space.astro";
import { getSession } from "../../scripts/Authenticate";

const title = 'New Post';

const session = await getSession();
if(session == null)
	return Astro.redirect('/login');
---

<Layout title={title}>
	<h1>{title}</h1>

	<Vertical>
		<div class="fileInput accent">
			<input
				id="inputFiles"
				type="file"
				name="fileSelect"
				multiple
				accept="{{ postMediaFilters }}">

			<label for="inputFiles">
				<Icon name="mingcute:plus-fill" />
				<p>Add files</p>
			</label>
		</div>

		<div id="postsContainer">
			<template id="postTemplate">
				<div class="post">
					<div class="postPreview"></div>
		
					<Vertical>
						<TagsInput addButton={true} />
		
						<textarea class="postDescription" placeholder="Description"></textarea>
		
						<Horizontal>
							<Horizontal>
								Public
								<input type="checkbox" checked class="postPublic" />
							</Horizontal>
							<Space />
							<Icon name="mingcute:delete-2-fill" class="btnRemove" />
						</Horizontal>
					</Vertical>
				</div>
			</template>
		</div>

		<div style="display: flex; justify-content: center">
			<button id="btnCreate" class="accent light">Upload</button>
			<!-- TODO: Progress bar  -->
		</div>
		<span class="error light hidden">Error text</span>
	</Vertical>
</Layout>

<script>
	import { TagInput } from "../../components/TagsInput";

	const VideoExtensions = [
		'mp4',
		'mpeg4',
		'mov',
		'ogg',
		'webm'
	]

	let posts = [];
	let inputFiles, btnCreate, errorText, postsContainer, postTemplate;

	function onFilesChange() {
		for(let i = 0; i < inputFiles.files.length; i++)
		{
			let postEl = postTemplate.content.cloneNode(true);
			postsContainer.appendChild(postEl);
			postEl = postsContainer.lastElementChild;

			// Set preview media
			let filename = inputFiles.files[i].name
			let postPreview = postEl.getElementsByClassName('postPreview')[0]
			let previewExt = filename.substring(filename.lastIndexOf('.') + 1).toLowerCase()
			if(VideoExtensions.includes(previewExt))
			{
				let video = document.createElement('video')
				video.src = URL.createObjectURL(inputFiles.files[i])
				video.controls = true
				postPreview.appendChild(video)
			}
			else
			{
				let img = document.createElement('img')
				img.src = URL.createObjectURL(inputFiles.files[i])
				postPreview.appendChild(img)
			}

			let post = {
				container: postEl,
				media: inputFiles.files[i],
				preview: postPreview,

				// Tags input
				tagInput: new TagInput(postEl.getElementsByClassName('tagsInput')[0])
			};
			
			// Delete button
			postEl.getElementsByClassName('btnRemove')[0]
				.addEventListener('click', () => {
					postsContainer.removeChild(postEl);
					posts.splice(posts.find(x => x.container == postEl));
					btnCreate.disabled = posts.length == 0;

					if(post.id)
						deletePost(post.id);
					else if(post.upload)
						post.upload.abort(); // Stop uploading image
				});

			uploadFile(post);
			posts.push(post);
		}

		// Clear file list
		inputFiles.value = null;

		// Set create button state
		btnCreate.disabled = posts.length == 0;
	}

	function uploadFile(post) {
		post.preview.style.opacity = 0.3;

		let body = new FormData();
		body.append('media', post.media, post.media.name);
		body.append('posts', JSON.stringify([{
			description: '',
			public: false,
			tags: []
		}]));

		post.upload = new XMLHttpRequest();
		post.upload.open('POST', '/api/posts/new', true);
		post.upload.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
		post.upload.responseType = 'json';

		post.upload.upload.addEventListener('progress', ev => {
			let progress = (ev.loaded / ev.total) * 100;
			console.log(`Upload progress: ${progress}%`);
		});

		post.upload.onload = () => {
			if(post.upload.status != 200 || !post.upload.response.success)
			{
				setError(post.upload.response.error);
				return;
			}

			post.id = post.upload.response.postIDs[0];
			post.preview.style.opacity = 1;
			post.upload = null;
			console.log(`Post ID: ${post.id}`);

			post.tagInput.generateSuggestedTags(post.id);
		};
		post.upload.send(body);
	}

	function updatePosts() {
		let body = []
		for(let i = 0; i < posts.length; i++)
		{
			body.push({
				id: posts[i].id,
				public: posts[i].container.getElementsByClassName('postPublic')[0].checked,
				description: posts[i].container.getElementsByTagName('textarea')[0].value,
				tags: posts[i].tagInput.selectedTags
			});
		}
		console.log(JSON.stringify({ posts: body }))
		fetch('/api/posts/updateMany', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ posts: body })
		})
		.then(response => response.json())
		.then(data => console.log(data))
		.catch(err => console.error(err))
	}

	function deletePost(postID) {
		fetch(`/api/posts/${postID}`, { method: 'DELETE' })
			.then(response => response.json())
			.then(data => {
				if(!data.success)
					console.log(data);
			})
	}

	function setError(msg) {
		errorText.innerHTML = msg;
		errorText.classList.toggle('hidden', !msg || msg == '');
	}

	function setup() {
		inputFiles = document.getElementById('inputFiles');
		btnCreate = document.getElementById('btnCreate');
		errorText = document.getElementsByClassName('layoutContent')[0].getElementsByClassName('error')[0];
		postsContainer = document.getElementById('postsContainer');
		postTemplate = document.getElementById('postTemplate');

		btnCreate.disabled = true;

		btnCreate.addEventListener('click', updatePosts);
		inputFiles.addEventListener('change', onFilesChange);
	}

	setup();
	document.addEventListener('astro:after-swap', setup);
</script>

<style is:global>
	.fileInput, #btnCreate {
		width: 100%;
		max-width: 200px;
		margin: 0 auto;
	}

	.fileInput label
	{
		display: flex;
		flex-direction: row;
		justify-content: center;
		align-items: center;
		gap: 10px;
		height: 15px;
		font-size: 0.85em;
	}

	.error {
		text-align: center;
		padding: 5px 10px;
	}

	#postsContainer
	{
		display: flex;
		flex-direction: column;
		gap: 20px;
	}

	.post
	{
		position: relative;
		border-radius: var(--rounding);
		border: 1px solid rgba(var(--secondary), 0.5);
		background: rgba(var(--secondary), 0.15);		

		padding: 10px 15px;
		display: flex;
		flex-direction: column;
		gap: 15px;

		justify-content: space-between;
		flex-direction: row;

		width: calc(100% - 40px);
		max-width: 1000px;
		margin: 0 auto;
	}

	.post > :not(.postPreview) {
		width: 60%;
	}

	.postPreview {
		width: 35%;
		margin: auto 0;
	}

	.postPreview > *
	{
		width: 100%;
		height: auto;
		max-height: 200px;
		object-fit: contain;
	}

	.btnRemove:hover {
		color: rgb(var(--error));
	}

	#btnCreate:disabled {
		display: none;
	}

	@media screen and (max-width: 750px) {
		.post {
			flex-direction: column;
		}

		.post > * {
			width: 100% !important;
		}
	}
</style>