<div class="postsContainer"></div>

<script>
	const VideoExtensions = [ '.mp4', '.mpeg4', '.ogg', '.mov', '.mkv' ]

	/*
	Options:
	
		container: 	The `div` with class 'postsContainer' attached.
					Posts are put into this element.

					Default = First element with 'postsContainer' class

		append: 	Appends posts into the container.
					If false, clears all posts and loads new ones into container.

					Default = false

	*/
	loadPosts = (tags, options) => new Promise(resolve =>
	{
		// console.log(tags)
		let url = '/api/posts'
		if(tags)
			url += encodeURI(`?tags=${tags.join(',')}`)

		let container = options?.container ?? document.getElementsByClassName('postsContainer')[0]
		if(!container)
		{
			console.error('No container found to load posts in to')
			return
		}

		if(!options?.append)
			container.innerHTML = ''

		fetch(url)
			.then(response => response.json())
			.then(posts =>
			{
				for(let i = 0; i < posts.length; i++)
				{
					let div = document.createElement('div')
					div.onclick = ev => document.location.href = `/posts/${posts[i]._id}`

					let img = document.createElement('img')
					img.src = `/api/posts/${posts[i]._id}/thumbnail`

					div.appendChild(img)

					let ext = posts[i].filepath.substring(posts[i].filepath.indexOf('.'))
					if(VideoExtensions.includes(ext))
						// Add video indicator
						div.innerHTML += `<span><i class="fa-solid fa-film fa-xl"></i></span>`

					container.appendChild(div)
				}

				resolve(posts)
			})
			.catch(err => console.error(err))
	})
</script>

<style>
.postsContainer
{
	columns: 3 250px;
	column-gap: 15px;
	row-gap: 15px;
	margin: 0 auto;
}

.postsContainer > *
{
	position: relative;
	cursor: pointer;
	margin-bottom: 10px;
	border-radius: var(--rounding);
	width: 100%;
	height: auto;
}

.postsContainer > div > img
{
	width: 100%;
	height: 100%;
	border-radius: var(--rounding);
}

/* Video indicator */
.postsContainer > div > span
{
	z-index: 10;
	position: absolute;
	top: 15px;
	left: 15px;
	background: var(--background2);
	border-radius: var(--rounding);
	padding: 10px;
	opacity: 0.75;
}

</style>