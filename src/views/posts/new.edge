@layout('layouts/app.edge')

@section('content')
<div class="vertical" id="postUploads">
	<input
		id="inputFiles"
		type="file"
		name="fileSelect"
		multiple
		accept="{{ postMediaFilters }}"

		onchange="onFilesChange()"
	>

	<div id="postsContainer">
		<template id="postTemplate">
			<div class="post">
				<img class="postPreview" src="#" />

				<div class="tagsAutocomplete">
					<input placeholder="Tags" />
					<ul class="tagsAutocompleteResults"></ul> <!-- Autocomplete results -->
					<ul class="tagsAutocompleteSelected"></ul> <!-- Selected tags -->
				</div>
			
				<textarea class="postDescription" placeholder="Description"></textarea>
			
				<div class="postPublic">
					<p>Public</p>
					<input type="checkbox" checked />
				</div>
				<button class="btnRemove">X</button>
			</div>
		</template>
	</div>

	<button onclick="onPostCreate(this)" id="btnCreate" disabled>Create</button>
	<p id="errorText"></p>

	<div class="progressBar"><div></div></div>
</div>

<script src="/tagsAutocomplete.js"></script>
<script>
	let filesEl = document.getElementById('inputFiles')
	let createBtn = document.getElementById('btnCreate')
	let errorText = document.getElementById('errorText')
	let postsContainer = document.getElementById('postsContainer')
	let postTemplate = document.getElementById('postTemplate')
	let progressBar = document.getElementsByClassName('progressBar')[0]

	let posts = []

	onFilesChange = () =>
	{		
		createBtn.disabled = filesEl.files.length == 0

		for(let i = 0; i < filesEl.files.length; i++)
		{
			let post = postTemplate.content.cloneNode(true)
			postsContainer.appendChild(post)
			post = postsContainer.lastElementChild

			// Set preview image
			post.getElementsByTagName('img')[0].src = URL.createObjectURL(filesEl.files[i])

			// Set up tag autocomplete
			let autocomplete = post.getElementsByClassName('tagsAutocomplete')[0]
			registerAutocomplete(autocomplete)

			// Set up delete button
			post.getElementsByClassName('btnRemove')[0]
				.addEventListener('click', ev => {
					postsContainer.removeChild(post)
					posts.splice(posts.find(x => x.container == post), 1)
				})

			posts.push({
				container: post,
				media: filesEl.files[i]
			})
		}

		// Clear files list
		filesEl.value = null
	}

	onPostCreate = async (btn) =>
	{
		setUploadProgress(0)
		showProgressBar(true)

		let body = new FormData()
		let allPosts = []
		for(let i = 0; i < posts.length; i++)
		{
			body.append('media', posts[i].media, posts[i].media.name)
			
			let post = {}
			post.description = posts[i].container.getElementsByClassName('postDescription')[0].value
			post.public = posts[i].container.getElementsByClassName('postPublic')[0].lastElementChild.checked

			// Tags from tagsAutocomplete.js
			let autocomplete = posts[i].container.getElementsByClassName('tagsAutocomplete')[0]
			post.tags = selectedTags.get(autocomplete)
			console.log(post)

			allPosts.push(post)
		}

		body.append('posts', JSON.stringify(allPosts))

		const request = new XMLHttpRequest()
		request.open('POST', '/api/posts/new', true)
		request.setRequestHeader('X-Requested-With', 'XMLHttpRequest')
		request.responseType = 'json'

		request.upload.addEventListener('progress', ev => {
			let progress = (ev.loaded / ev.total) * 100
			console.log(`Upload progress: ${progress}%`)
			setUploadProgress(progress)
		})

		request.onload = () => {
			showProgressBar(false)
	
			if(request.status == 200 && request.response.success)
				document.location.href = '/posts'
			else
				setErrorText(request.response.error)
		}

		request.send(body)
	}

	setErrorText = (text) => errorText.innerHTML = ''

	showProgressBar = (show) => progressBar.style.display = show ? 'block' : 'none'

	setUploadProgress = (percent) =>
		progressBar.firstElementChild.style.inset = `0 ${100 - percent}% 0 0`

	showProgressBar(false)
</script>

@endsection

@section('styles')
<link href="/tagsAutocomplete.css" rel="stylesheet" />

<style>
	#postUploads
	{
		max-width: 300px;
		margin-left: auto;
		margin-right: auto;
		justify-content: center;
	}

	#postsContainer
	{
		display: flex;
		flex-direction: column;
		gap: 20px;
	}

	.post
	{
		position: relative;
		border-radius: var(--rounding);
		background-color: rgba(255, 255, 255, 0.1);

		padding: 5px 10px;
		display: flex;
		flex-direction: column;
		justify-content: center;
		gap: 15px;
	}

	.post img
	{
		object-fit: contain;
		width: auto;
		max-height: 100px;
	}

	.postDescription
	{
		outline: none;
		padding: 10px;
		resize: vertical;
		border: 1px solid transparent;
		border-radius: var(--rounding);

		color: var(--text);
		background: rgba(255, 255, 255, 0.1);

		transition: border 0.2s ease-in-out; 
	}

	.postDescription::placeholder
	{
		color: var(--text);
		opacity: 0.6;
	}

	.postDescription:focus, .postDescription:active
	{
		border-color: var(--accent);
		transition: border 0.2s ease-in-out; 
	}

	.postPublic
	{
		display: flex;
		flex-direction: row;
		gap: 15px;
		height: 25px;
	}

	.postPublic > *
	{
		margin: 0;
		outline: none;
	}

	.post > .btnRemove
	{
		position: absolute;
		top: 10px; right: 10px;

		width: 25px;
		height: 25px;
		color: var(--text);
		background: var(--background2);
		border: 1px solid var(--error);
		outline: none;

		transition: border 0.2s ease-in-out;
	}

	.post > .btnRemove:hover, .post > .btnRemove:focus
	{
		background-color: var(--error);
		transition: border 0.2s ease-in-out;
	}

	@media screen and (max-width: 600px)
	{
		#postUploads
		{
			max-width: unset;
		}
	}
</style>
@endsection